// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package dibasics.extractdata_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: extractData Purpose: extract customers_retrail table from database<br>
 * Description: extract data and save it in a delimiterd file <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class extractData implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (filepath != null) {

				this.setProperty("filepath", filepath.toString());

			}

			if (DBConnect_Database != null) {

				this.setProperty("DBConnect_Database", DBConnect_Database.toString());

			}

			if (DBConnect_Password != null) {

				this.setProperty("DBConnect_Password", DBConnect_Password.toString());

			}

			if (DBConnect_Server != null) {

				this.setProperty("DBConnect_Server", DBConnect_Server.toString());

			}

			if (DBConnect_Port != null) {

				this.setProperty("DBConnect_Port", DBConnect_Port.toString());

			}

			if (DBConnect_AdditionalParams != null) {

				this.setProperty("DBConnect_AdditionalParams", DBConnect_AdditionalParams.toString());

			}

			if (DBConnect_Login != null) {

				this.setProperty("DBConnect_Login", DBConnect_Login.toString());

			}

			if (DBConnect1_Login != null) {

				this.setProperty("DBConnect1_Login", DBConnect1_Login.toString());

			}

			if (DBConnect1_Password != null) {

				this.setProperty("DBConnect1_Password", DBConnect1_Password.toString());

			}

			if (DBConnect1_Database != null) {

				this.setProperty("DBConnect1_Database", DBConnect1_Database.toString());

			}

			if (DBConnect1_Server != null) {

				this.setProperty("DBConnect1_Server", DBConnect1_Server.toString());

			}

			if (DBConnect1_AdditionalParams != null) {

				this.setProperty("DBConnect1_AdditionalParams", DBConnect1_AdditionalParams.toString());

			}

			if (DBConnect1_Port != null) {

				this.setProperty("DBConnect1_Port", DBConnect1_Port.toString());

			}

			if (limit != null) {

				this.setProperty("limit", limit.toString());

			}

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

		public String filepath;

		public String getFilepath() {
			return this.filepath;
		}

		public String DBConnect_Database;

		public String getDBConnect_Database() {
			return this.DBConnect_Database;
		}

		public java.lang.String DBConnect_Password;

		public java.lang.String getDBConnect_Password() {
			return this.DBConnect_Password;
		}

		public String DBConnect_Server;

		public String getDBConnect_Server() {
			return this.DBConnect_Server;
		}

		public String DBConnect_Port;

		public String getDBConnect_Port() {
			return this.DBConnect_Port;
		}

		public String DBConnect_AdditionalParams;

		public String getDBConnect_AdditionalParams() {
			return this.DBConnect_AdditionalParams;
		}

		public String DBConnect_Login;

		public String getDBConnect_Login() {
			return this.DBConnect_Login;
		}

		public String DBConnect1_Login;

		public String getDBConnect1_Login() {
			return this.DBConnect1_Login;
		}

		public java.lang.String DBConnect1_Password;

		public java.lang.String getDBConnect1_Password() {
			return this.DBConnect1_Password;
		}

		public String DBConnect1_Database;

		public String getDBConnect1_Database() {
			return this.DBConnect1_Database;
		}

		public String DBConnect1_Server;

		public String getDBConnect1_Server() {
			return this.DBConnect1_Server;
		}

		public String DBConnect1_AdditionalParams;

		public String getDBConnect1_AdditionalParams() {
			return this.DBConnect1_AdditionalParams;
		}

		public String DBConnect1_Port;

		public String getDBConnect1_Port() {
			return this.DBConnect1_Port;
		}

		public String limit;

		public String getLimit() {
			return this.limit;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "extractData";
	private final String projectName = "DIBASICS";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					extractData.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(extractData.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DIBASICS_extractData = new byte[0];
		static byte[] commonByteArray_DIBASICS_extractData = new byte[0];

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public String CustomerName;

		public String getCustomerName() {
			return this.CustomerName;
		}

		public String CustomerAddress;

		public String getCustomerAddress() {
			return this.CustomerAddress;
		}

		public Integer idState;

		public Integer getIdState() {
			return this.idState;
		}

		public Integer id2;

		public Integer getId2() {
			return this.id2;
		}

		public String RegTime;

		public String getRegTime() {
			return this.RegTime;
		}

		public java.util.Date RegisterTime;

		public java.util.Date getRegisterTime() {
			return this.RegisterTime;
		}

		public Float Sum1;

		public Float getSum1() {
			return this.Sum1;
		}

		public Float Sum2;

		public Float getSum2() {
			return this.Sum2;
		}

		public Float Sum3;

		public Float getSum3() {
			return this.Sum3;
		}

		public Float Sum4;

		public Float getSum4() {
			return this.Sum4;
		}

		public Float Sum5;

		public Float getSum5() {
			return this.Sum5;
		}

		public Float Sum6;

		public Float getSum6() {
			return this.Sum6;
		}

		public Float Sum7;

		public Float getSum7() {
			return this.Sum7;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DIBASICS_extractData.length) {
					if (length < 1024 && commonByteArray_DIBASICS_extractData.length == 0) {
						commonByteArray_DIBASICS_extractData = new byte[1024];
					} else {
						commonByteArray_DIBASICS_extractData = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DIBASICS_extractData, 0, length);
				strReturn = new String(commonByteArray_DIBASICS_extractData, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DIBASICS_extractData.length) {
					if (length < 1024 && commonByteArray_DIBASICS_extractData.length == 0) {
						commonByteArray_DIBASICS_extractData = new byte[1024];
					} else {
						commonByteArray_DIBASICS_extractData = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DIBASICS_extractData, 0, length);
				strReturn = new String(commonByteArray_DIBASICS_extractData, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DIBASICS_extractData) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.CustomerName = readString(dis);

					this.CustomerAddress = readString(dis);

					this.idState = readInteger(dis);

					this.id2 = readInteger(dis);

					this.RegTime = readString(dis);

					this.RegisterTime = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Sum1 = null;
					} else {
						this.Sum1 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Sum2 = null;
					} else {
						this.Sum2 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Sum3 = null;
					} else {
						this.Sum3 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Sum4 = null;
					} else {
						this.Sum4 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Sum5 = null;
					} else {
						this.Sum5 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Sum6 = null;
					} else {
						this.Sum6 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Sum7 = null;
					} else {
						this.Sum7 = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DIBASICS_extractData) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.CustomerName = readString(dis);

					this.CustomerAddress = readString(dis);

					this.idState = readInteger(dis);

					this.id2 = readInteger(dis);

					this.RegTime = readString(dis);

					this.RegisterTime = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Sum1 = null;
					} else {
						this.Sum1 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Sum2 = null;
					} else {
						this.Sum2 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Sum3 = null;
					} else {
						this.Sum3 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Sum4 = null;
					} else {
						this.Sum4 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Sum5 = null;
					} else {
						this.Sum5 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Sum6 = null;
					} else {
						this.Sum6 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Sum7 = null;
					} else {
						this.Sum7 = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// String

				writeString(this.CustomerName, dos);

				// String

				writeString(this.CustomerAddress, dos);

				// Integer

				writeInteger(this.idState, dos);

				// Integer

				writeInteger(this.id2, dos);

				// String

				writeString(this.RegTime, dos);

				// java.util.Date

				writeDate(this.RegisterTime, dos);

				// Float

				if (this.Sum1 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Sum1);
				}

				// Float

				if (this.Sum2 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Sum2);
				}

				// Float

				if (this.Sum3 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Sum3);
				}

				// Float

				if (this.Sum4 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Sum4);
				}

				// Float

				if (this.Sum5 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Sum5);
				}

				// Float

				if (this.Sum6 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Sum6);
				}

				// Float

				if (this.Sum7 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Sum7);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// String

				writeString(this.CustomerName, dos);

				// String

				writeString(this.CustomerAddress, dos);

				// Integer

				writeInteger(this.idState, dos);

				// Integer

				writeInteger(this.id2, dos);

				// String

				writeString(this.RegTime, dos);

				// java.util.Date

				writeDate(this.RegisterTime, dos);

				// Float

				if (this.Sum1 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Sum1);
				}

				// Float

				if (this.Sum2 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Sum2);
				}

				// Float

				if (this.Sum3 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Sum3);
				}

				// Float

				if (this.Sum4 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Sum4);
				}

				// Float

				if (this.Sum5 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Sum5);
				}

				// Float

				if (this.Sum6 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Sum6);
				}

				// Float

				if (this.Sum7 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Sum7);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",CustomerName=" + CustomerName);
			sb.append(",CustomerAddress=" + CustomerAddress);
			sb.append(",idState=" + String.valueOf(idState));
			sb.append(",id2=" + String.valueOf(id2));
			sb.append(",RegTime=" + RegTime);
			sb.append(",RegisterTime=" + String.valueOf(RegisterTime));
			sb.append(",Sum1=" + String.valueOf(Sum1));
			sb.append(",Sum2=" + String.valueOf(Sum2));
			sb.append(",Sum3=" + String.valueOf(Sum3));
			sb.append(",Sum4=" + String.valueOf(Sum4));
			sb.append(",Sum5=" + String.valueOf(Sum5));
			sb.append(",Sum6=" + String.valueOf(Sum6));
			sb.append(",Sum7=" + String.valueOf(Sum7));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						"C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/customersRetail2.csv")).getAbsolutePath()
								.replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
							fileName_tFileOutputDelimited_1.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
																		 * Start field
																		 * tFileOutputDelimited_1:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_1.length() == 0) {
					outtFileOutputDelimited_1.write("id");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("CustomerName");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("CustomerAddress");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("idState");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("id2");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("RegTime");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("RegisterTime");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sum1");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sum2");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sum3");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sum4");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sum5");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sum6");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sum7");
					outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
				calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.DBConnect1_Login;

				final String decryptedPassword_tDBInput_1 = context.DBConnect1_Password;

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String properties_tDBInput_1 = context.DBConnect1_AdditionalParams;
				if (properties_tDBInput_1 == null || properties_tDBInput_1.trim().length() == 0) {
					properties_tDBInput_1 = "";
				}
				String url_tDBInput_1 = "jdbc:mysql://" + context.DBConnect1_Server + ":" + context.DBConnect1_Port
						+ "/" + context.DBConnect1_Database + "?" + properties_tDBInput_1;

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  `customers_retail`.`id`, \n  `customers_retail`.`CustomerName`, \n  `customers_retail`.`CustomerAddress`, \n  `c"
						+ "ustomers_retail`.`idState`, \n  `customers_retail`.`id2`, \n  `customers_retail`.`RegTime`, \n  `customers_retail`.`Registe"
						+ "rTime`, \n  `customers_retail`.`Sum1`, \n  `customers_retail`.`Sum2`, \n  `customers_retail`.`Sum3`, \n  `customers_retail`."
						+ "`Sum4`, \n  `customers_retail`.`Sum5`, \n  `customers_retail`.`Sum6`, \n  `customers_retail`.`Sum7`\nFROM `customers_retail`"
						+ "" + context.limit;

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.id = null;
						} else {

							row1.id = rs_tDBInput_1.getInt(1);
							if (rs_tDBInput_1.wasNull()) {
								row1.id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.CustomerName = null;
						} else {

							row1.CustomerName = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.CustomerAddress = null;
						} else {

							row1.CustomerAddress = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.idState = null;
						} else {

							row1.idState = rs_tDBInput_1.getInt(4);
							if (rs_tDBInput_1.wasNull()) {
								row1.idState = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.id2 = null;
						} else {

							row1.id2 = rs_tDBInput_1.getInt(5);
							if (rs_tDBInput_1.wasNull()) {
								row1.id2 = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.RegTime = null;
						} else {

							row1.RegTime = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.RegisterTime = null;
						} else {

							if (rs_tDBInput_1.getString(7) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(7);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.RegisterTime = rs_tDBInput_1.getTimestamp(7);
								} else {
									row1.RegisterTime = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.RegisterTime = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.Sum1 = null;
						} else {

							row1.Sum1 = rs_tDBInput_1.getFloat(8);
							if (rs_tDBInput_1.wasNull()) {
								row1.Sum1 = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row1.Sum2 = null;
						} else {

							row1.Sum2 = rs_tDBInput_1.getFloat(9);
							if (rs_tDBInput_1.wasNull()) {
								row1.Sum2 = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row1.Sum3 = null;
						} else {

							row1.Sum3 = rs_tDBInput_1.getFloat(10);
							if (rs_tDBInput_1.wasNull()) {
								row1.Sum3 = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row1.Sum4 = null;
						} else {

							row1.Sum4 = rs_tDBInput_1.getFloat(11);
							if (rs_tDBInput_1.wasNull()) {
								row1.Sum4 = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 12) {
							row1.Sum5 = null;
						} else {

							row1.Sum5 = rs_tDBInput_1.getFloat(12);
							if (rs_tDBInput_1.wasNull()) {
								row1.Sum5 = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 13) {
							row1.Sum6 = null;
						} else {

							row1.Sum6 = rs_tDBInput_1.getFloat(13);
							if (rs_tDBInput_1.wasNull()) {
								row1.Sum6 = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 14) {
							row1.Sum7 = null;
						} else {

							row1.Sum7 = rs_tDBInput_1.getFloat(14);
							if (rs_tDBInput_1.wasNull()) {
								row1.Sum7 = null;
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 main ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row1"

							);
						}

						StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
						if (row1.id != null) {
							sb_tFileOutputDelimited_1.append(row1.id);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.CustomerName != null) {
							sb_tFileOutputDelimited_1.append(row1.CustomerName);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.CustomerAddress != null) {
							sb_tFileOutputDelimited_1.append(row1.CustomerAddress);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.idState != null) {
							sb_tFileOutputDelimited_1.append(row1.idState);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.id2 != null) {
							sb_tFileOutputDelimited_1.append(row1.id2);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.RegTime != null) {
							sb_tFileOutputDelimited_1.append(row1.RegTime);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.RegisterTime != null) {
							sb_tFileOutputDelimited_1
									.append(FormatterUtils.format_Date(row1.RegisterTime, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.Sum1 != null) {
							sb_tFileOutputDelimited_1.append(row1.Sum1);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.Sum2 != null) {
							sb_tFileOutputDelimited_1.append(row1.Sum2);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.Sum3 != null) {
							sb_tFileOutputDelimited_1.append(row1.Sum3);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.Sum4 != null) {
							sb_tFileOutputDelimited_1.append(row1.Sum4);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.Sum5 != null) {
							sb_tFileOutputDelimited_1.append(row1.Sum5);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.Sum6 != null) {
							sb_tFileOutputDelimited_1.append(row1.Sum6);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.Sum7 != null) {
							sb_tFileOutputDelimited_1.append(row1.Sum7);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

						nb_line_tFileOutputDelimited_1++;
						resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

						tos_count_tFileOutputDelimited_1++;

						/**
						 * [tFileOutputDelimited_1 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						/**
						 * [tFileOutputDelimited_1 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						/**
						 * [tFileOutputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE", nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "development";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final extractData extractDataClass = new extractData();

		int exitCode = extractDataClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = extractData.class.getClassLoader()
					.getResourceAsStream("dibasics/extractdata_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = extractData.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("filepath", "id_Directory");
					if (context.getStringValue("filepath") == null) {
						context.filepath = null;
					} else {
						context.filepath = (String) context.getProperty("filepath");
					}
					context.setContextType("DBConnect_Database", "id_String");
					if (context.getStringValue("DBConnect_Database") == null) {
						context.DBConnect_Database = null;
					} else {
						context.DBConnect_Database = (String) context.getProperty("DBConnect_Database");
					}
					context.setContextType("DBConnect_Password", "id_Password");
					if (context.getStringValue("DBConnect_Password") == null) {
						context.DBConnect_Password = null;
					} else {
						String pwd_DBConnect_Password_value = context.getProperty("DBConnect_Password");
						context.DBConnect_Password = null;
						if (pwd_DBConnect_Password_value != null) {
							if (context_param.containsKey("DBConnect_Password")) {// no need to decrypt if it come from
																					// program argument or parent job
																					// runtime
								context.DBConnect_Password = pwd_DBConnect_Password_value;
							} else if (!pwd_DBConnect_Password_value.isEmpty()) {
								try {
									context.DBConnect_Password = routines.system.PasswordEncryptUtil
											.decryptPassword(pwd_DBConnect_Password_value);
									context.put("DBConnect_Password", context.DBConnect_Password);
								} catch (java.lang.RuntimeException e) {
									// do nothing
								}
							}
						}
					}
					context.setContextType("DBConnect_Server", "id_String");
					if (context.getStringValue("DBConnect_Server") == null) {
						context.DBConnect_Server = null;
					} else {
						context.DBConnect_Server = (String) context.getProperty("DBConnect_Server");
					}
					context.setContextType("DBConnect_Port", "id_String");
					if (context.getStringValue("DBConnect_Port") == null) {
						context.DBConnect_Port = null;
					} else {
						context.DBConnect_Port = (String) context.getProperty("DBConnect_Port");
					}
					context.setContextType("DBConnect_AdditionalParams", "id_String");
					if (context.getStringValue("DBConnect_AdditionalParams") == null) {
						context.DBConnect_AdditionalParams = null;
					} else {
						context.DBConnect_AdditionalParams = (String) context.getProperty("DBConnect_AdditionalParams");
					}
					context.setContextType("DBConnect_Login", "id_String");
					if (context.getStringValue("DBConnect_Login") == null) {
						context.DBConnect_Login = null;
					} else {
						context.DBConnect_Login = (String) context.getProperty("DBConnect_Login");
					}
					context.setContextType("DBConnect1_Login", "id_String");
					if (context.getStringValue("DBConnect1_Login") == null) {
						context.DBConnect1_Login = null;
					} else {
						context.DBConnect1_Login = (String) context.getProperty("DBConnect1_Login");
					}
					context.setContextType("DBConnect1_Password", "id_Password");
					if (context.getStringValue("DBConnect1_Password") == null) {
						context.DBConnect1_Password = null;
					} else {
						String pwd_DBConnect1_Password_value = context.getProperty("DBConnect1_Password");
						context.DBConnect1_Password = null;
						if (pwd_DBConnect1_Password_value != null) {
							if (context_param.containsKey("DBConnect1_Password")) {// no need to decrypt if it come from
																					// program argument or parent job
																					// runtime
								context.DBConnect1_Password = pwd_DBConnect1_Password_value;
							} else if (!pwd_DBConnect1_Password_value.isEmpty()) {
								try {
									context.DBConnect1_Password = routines.system.PasswordEncryptUtil
											.decryptPassword(pwd_DBConnect1_Password_value);
									context.put("DBConnect1_Password", context.DBConnect1_Password);
								} catch (java.lang.RuntimeException e) {
									// do nothing
								}
							}
						}
					}
					context.setContextType("DBConnect1_Database", "id_String");
					if (context.getStringValue("DBConnect1_Database") == null) {
						context.DBConnect1_Database = null;
					} else {
						context.DBConnect1_Database = (String) context.getProperty("DBConnect1_Database");
					}
					context.setContextType("DBConnect1_Server", "id_String");
					if (context.getStringValue("DBConnect1_Server") == null) {
						context.DBConnect1_Server = null;
					} else {
						context.DBConnect1_Server = (String) context.getProperty("DBConnect1_Server");
					}
					context.setContextType("DBConnect1_AdditionalParams", "id_String");
					if (context.getStringValue("DBConnect1_AdditionalParams") == null) {
						context.DBConnect1_AdditionalParams = null;
					} else {
						context.DBConnect1_AdditionalParams = (String) context
								.getProperty("DBConnect1_AdditionalParams");
					}
					context.setContextType("DBConnect1_Port", "id_String");
					if (context.getStringValue("DBConnect1_Port") == null) {
						context.DBConnect1_Port = null;
					} else {
						context.DBConnect1_Port = (String) context.getProperty("DBConnect1_Port");
					}
					context.setContextType("limit", "id_String");
					if (context.getStringValue("limit") == null) {
						context.limit = null;
					} else {
						context.limit = (String) context.getProperty("limit");
					}
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("filepath")) {
				context.filepath = (String) parentContextMap.get("filepath");
			}
			if (parentContextMap.containsKey("DBConnect_Database")) {
				context.DBConnect_Database = (String) parentContextMap.get("DBConnect_Database");
			}
			if (parentContextMap.containsKey("DBConnect_Password")) {
				context.DBConnect_Password = (java.lang.String) parentContextMap.get("DBConnect_Password");
			}
			if (parentContextMap.containsKey("DBConnect_Server")) {
				context.DBConnect_Server = (String) parentContextMap.get("DBConnect_Server");
			}
			if (parentContextMap.containsKey("DBConnect_Port")) {
				context.DBConnect_Port = (String) parentContextMap.get("DBConnect_Port");
			}
			if (parentContextMap.containsKey("DBConnect_AdditionalParams")) {
				context.DBConnect_AdditionalParams = (String) parentContextMap.get("DBConnect_AdditionalParams");
			}
			if (parentContextMap.containsKey("DBConnect_Login")) {
				context.DBConnect_Login = (String) parentContextMap.get("DBConnect_Login");
			}
			if (parentContextMap.containsKey("DBConnect1_Login")) {
				context.DBConnect1_Login = (String) parentContextMap.get("DBConnect1_Login");
			}
			if (parentContextMap.containsKey("DBConnect1_Password")) {
				context.DBConnect1_Password = (java.lang.String) parentContextMap.get("DBConnect1_Password");
			}
			if (parentContextMap.containsKey("DBConnect1_Database")) {
				context.DBConnect1_Database = (String) parentContextMap.get("DBConnect1_Database");
			}
			if (parentContextMap.containsKey("DBConnect1_Server")) {
				context.DBConnect1_Server = (String) parentContextMap.get("DBConnect1_Server");
			}
			if (parentContextMap.containsKey("DBConnect1_AdditionalParams")) {
				context.DBConnect1_AdditionalParams = (String) parentContextMap.get("DBConnect1_AdditionalParams");
			}
			if (parentContextMap.containsKey("DBConnect1_Port")) {
				context.DBConnect1_Port = (String) parentContextMap.get("DBConnect1_Port");
			}
			if (parentContextMap.containsKey("limit")) {
				context.limit = (String) parentContextMap.get("limit");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("DBConnect_Password");
		parametersToEncrypt.add("DBConnect1_Password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : extractData");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 77888 characters generated by Talend Open Studio for Data Integration on the
 * 25 de julio de 2022, 18:44:18 ART
 ************************************************************************************************/